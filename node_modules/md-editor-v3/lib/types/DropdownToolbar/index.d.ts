import { App } from 'vue';
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        visible: {
            type: import("vue").PropType<boolean>;
        };
        trigger: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        onChange: {
            type: import("vue").PropType<(visible: boolean) => void>;
        };
        overlay: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        insert: {
            type: import("vue").PropType<() => void>;
        };
        language: {
            type: import("vue").PropType<string>;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
        };
        default: {
            type: import("vue").PropType<string | Element>;
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "onChange"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        visible: {
            type: import("vue").PropType<boolean>;
        };
        trigger: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        onChange: {
            type: import("vue").PropType<(visible: boolean) => void>;
        };
        overlay: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        insert: {
            type: import("vue").PropType<() => void>;
        };
        language: {
            type: import("vue").PropType<string>;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
        };
        default: {
            type: import("vue").PropType<string | Element>;
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
    }, {
        title: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        visible: {
            type: import("vue").PropType<boolean>;
        };
        trigger: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        onChange: {
            type: import("vue").PropType<(visible: boolean) => void>;
        };
        overlay: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        insert: {
            type: import("vue").PropType<() => void>;
        };
        language: {
            type: import("vue").PropType<string>;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
        };
        default: {
            type: import("vue").PropType<string | Element>;
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, {
        title: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: import("vue").PropType<string>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
    };
    trigger: {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
    };
    onChange: {
        type: import("vue").PropType<(visible: boolean) => void>;
    };
    overlay: {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
    };
    insert: {
        type: import("vue").PropType<() => void>;
    };
    language: {
        type: import("vue").PropType<string>;
    };
    theme: {
        type: import("vue").PropType<import("..").Themes>;
    };
    previewTheme: {
        type: import("vue").PropType<string>;
    };
    default: {
        type: import("vue").PropType<string | Element>;
    };
}>> & {
    onOnChange?: ((...args: any[]) => any) | undefined;
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "onChange"[], "onChange", {
    title: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => App;
};
export default _default;
