import { App } from 'vue';
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        editorId: {
            type: import("vue").PropType<string>;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        mdHeadingId: {
            type: import("vue").PropType<import("..").MdHeadingId>;
            default: (text: string) => string;
        };
        scrollElement: {
            type: import("vue").PropType<string | HTMLElement>;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: string;
        };
        offsetTop: {
            type: import("vue").PropType<number>;
            default: number;
        };
        scrollElementOffsetTop: {
            type: import("vue").PropType<number>;
            default: number;
        };
        onClick: {
            type: import("vue").PropType<(e: MouseEvent, t: import("./MdCatalog").TocItem) => void>;
        };
        onActive: {
            type: import("vue").PropType<(heading: import("..").HeadList | undefined) => void>;
        };
        isScrollElementInShadow: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        onOnClick?: ((...args: any[]) => any) | undefined;
        onOnActive?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("onClick" | "onActive")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        editorId: {
            type: import("vue").PropType<string>;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        mdHeadingId: {
            type: import("vue").PropType<import("..").MdHeadingId>;
            default: (text: string) => string;
        };
        scrollElement: {
            type: import("vue").PropType<string | HTMLElement>;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: string;
        };
        offsetTop: {
            type: import("vue").PropType<number>;
            default: number;
        };
        scrollElementOffsetTop: {
            type: import("vue").PropType<number>;
            default: number;
        };
        onClick: {
            type: import("vue").PropType<(e: MouseEvent, t: import("./MdCatalog").TocItem) => void>;
        };
        onActive: {
            type: import("vue").PropType<(heading: import("..").HeadList | undefined) => void>;
        };
        isScrollElementInShadow: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        onOnClick?: ((...args: any[]) => any) | undefined;
        onOnActive?: ((...args: any[]) => any) | undefined;
    }, {
        class: string;
        theme: import("..").Themes;
        mdHeadingId: import("..").MdHeadingId;
        offsetTop: number;
        scrollElementOffsetTop: number;
        isScrollElementInShadow: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        editorId: {
            type: import("vue").PropType<string>;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        mdHeadingId: {
            type: import("vue").PropType<import("..").MdHeadingId>;
            default: (text: string) => string;
        };
        scrollElement: {
            type: import("vue").PropType<string | HTMLElement>;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: string;
        };
        offsetTop: {
            type: import("vue").PropType<number>;
            default: number;
        };
        scrollElementOffsetTop: {
            type: import("vue").PropType<number>;
            default: number;
        };
        onClick: {
            type: import("vue").PropType<(e: MouseEvent, t: import("./MdCatalog").TocItem) => void>;
        };
        onActive: {
            type: import("vue").PropType<(heading: import("..").HeadList | undefined) => void>;
        };
        isScrollElementInShadow: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }>> & {
        onOnClick?: ((...args: any[]) => any) | undefined;
        onOnActive?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, {
        class: string;
        theme: import("..").Themes;
        mdHeadingId: import("..").MdHeadingId;
        offsetTop: number;
        scrollElementOffsetTop: number;
        isScrollElementInShadow: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    editorId: {
        type: import("vue").PropType<string>;
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    mdHeadingId: {
        type: import("vue").PropType<import("..").MdHeadingId>;
        default: (text: string) => string;
    };
    scrollElement: {
        type: import("vue").PropType<string | HTMLElement>;
    };
    theme: {
        type: import("vue").PropType<import("..").Themes>;
        default: string;
    };
    offsetTop: {
        type: import("vue").PropType<number>;
        default: number;
    };
    scrollElementOffsetTop: {
        type: import("vue").PropType<number>;
        default: number;
    };
    onClick: {
        type: import("vue").PropType<(e: MouseEvent, t: import("./MdCatalog").TocItem) => void>;
    };
    onActive: {
        type: import("vue").PropType<(heading: import("..").HeadList | undefined) => void>;
    };
    isScrollElementInShadow: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}>> & {
    onOnClick?: ((...args: any[]) => any) | undefined;
    onOnActive?: ((...args: any[]) => any) | undefined;
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("onClick" | "onActive")[], "onClick" | "onActive", {
    class: string;
    theme: import("..").Themes;
    mdHeadingId: import("..").MdHeadingId;
    offsetTop: number;
    scrollElementOffsetTop: number;
    isScrollElementInShadow: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => App;
};
export default _default;
