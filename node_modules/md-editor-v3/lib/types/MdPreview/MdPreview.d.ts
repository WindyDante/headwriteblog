declare const MdPreview: import("vue").DefineComponent<{
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onChange: {
        type: import("vue").PropType<import("../MdEditor/type").ChangeEvent>;
    };
    theme: {
        type: import("vue").PropType<import("../MdEditor/type").Themes>;
        default: string;
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    language: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onHtmlChanged: {
        type: import("vue").PropType<import("../MdEditor/type").HtmlChangedEvent>;
    };
    onGetCatalog: {
        type: import("vue").PropType<import("../MdEditor/type").GetCatalogEvent>;
    };
    editorId: {
        type: import("vue").PropType<string>;
        default: () => string;
    };
    showCodeRowNumber: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    style: {
        type: import("vue").PropType<string | import("vue").CSSProperties>;
        default: () => {};
    };
    mdHeadingId: {
        type: import("vue").PropType<import("../MdEditor/type").MdHeadingId>;
        default: import("../MdEditor/type").MdHeadingId;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noIconfont: {
        type: import("vue").PropType<boolean>;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    codeStyleReverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeStyleReverseList: {
        type: import("vue").PropType<string[]>;
        default: string[];
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    customIcon: {
        type: import("vue").PropType<import("../MdEditor/type").CustomIcon>;
        default: {};
    };
    sanitizeMermaid: {
        type: import("vue").PropType<(h: string) => Promise<string>>;
        default: (h: string) => Promise<string>;
    };
    codeFoldable: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    autoFoldThreshold: {
        type: import("vue").PropType<number>;
        default: number;
    };
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("../MdEditor/type").EditorEmits, "onChange" | "onSave" | "onUploadImg" | "onHtmlChanged" | "onGetCatalog" | "onError" | "update:modelValue" | "onBlur" | "onFocus" | "onInput" | "onDrop" | "onInputBoxWitdhChange", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onChange: {
        type: import("vue").PropType<import("../MdEditor/type").ChangeEvent>;
    };
    theme: {
        type: import("vue").PropType<import("../MdEditor/type").Themes>;
        default: string;
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    language: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onHtmlChanged: {
        type: import("vue").PropType<import("../MdEditor/type").HtmlChangedEvent>;
    };
    onGetCatalog: {
        type: import("vue").PropType<import("../MdEditor/type").GetCatalogEvent>;
    };
    editorId: {
        type: import("vue").PropType<string>;
        default: () => string;
    };
    showCodeRowNumber: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    style: {
        type: import("vue").PropType<string | import("vue").CSSProperties>;
        default: () => {};
    };
    mdHeadingId: {
        type: import("vue").PropType<import("../MdEditor/type").MdHeadingId>;
        default: import("../MdEditor/type").MdHeadingId;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noIconfont: {
        type: import("vue").PropType<boolean>;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    codeStyleReverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeStyleReverseList: {
        type: import("vue").PropType<string[]>;
        default: string[];
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    customIcon: {
        type: import("vue").PropType<import("../MdEditor/type").CustomIcon>;
        default: {};
    };
    sanitizeMermaid: {
        type: import("vue").PropType<(h: string) => Promise<string>>;
        default: (h: string) => Promise<string>;
    };
    codeFoldable: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    autoFoldThreshold: {
        type: import("vue").PropType<number>;
        default: number;
    };
}>> & {
    onOnChange?: ((...args: any[]) => any) | undefined;
    onOnSave?: ((...args: any[]) => any) | undefined;
    onOnUploadImg?: ((...args: any[]) => any) | undefined;
    onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
    onOnGetCatalog?: ((...args: any[]) => any) | undefined;
    onOnError?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onOnBlur?: ((...args: any[]) => any) | undefined;
    onOnFocus?: ((...args: any[]) => any) | undefined;
    onOnInput?: ((...args: any[]) => any) | undefined;
    onOnDrop?: ((...args: any[]) => any) | undefined;
    onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
}, {
    class: string;
    style: string | import("vue").CSSProperties;
    language: string;
    modelValue: string;
    theme: import("../MdEditor/type").Themes;
    editorId: string;
    showCodeRowNumber: boolean;
    previewTheme: string;
    mdHeadingId: import("../MdEditor/type").MdHeadingId;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    codeTheme: string;
    formatCopiedText: (text: string) => string;
    codeStyleReverse: boolean;
    codeStyleReverseList: string[];
    noHighlight: boolean;
    noImgZoomIn: boolean;
    customIcon: import("../MdEditor/type").CustomIcon;
    sanitizeMermaid: (h: string) => Promise<string>;
    codeFoldable: boolean;
    autoFoldThreshold: number;
}, {}>;
export default MdPreview;
