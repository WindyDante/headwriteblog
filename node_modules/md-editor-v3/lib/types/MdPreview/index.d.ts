import { App } from 'vue';
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onChange: {
            type: import("vue").PropType<import("..").ChangeEvent>;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: string;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        language: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onHtmlChanged: {
            type: import("vue").PropType<import("..").HtmlChangedEvent>;
        };
        onGetCatalog: {
            type: import("vue").PropType<import("..").GetCatalogEvent>;
        };
        editorId: {
            type: import("vue").PropType<string>;
            default: () => string;
        };
        showCodeRowNumber: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: () => {};
        };
        mdHeadingId: {
            type: import("vue").PropType<import("..").MdHeadingId>;
            default: import("..").MdHeadingId;
        };
        sanitize: {
            type: import("vue").PropType<(html: string) => string>;
            default: (html: string) => string;
        };
        noMermaid: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noKatex: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        noIconfont: {
            type: import("vue").PropType<boolean>;
        };
        formatCopiedText: {
            type: import("vue").PropType<(text: string) => string>;
            default: (text: string) => string;
        };
        codeStyleReverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeStyleReverseList: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        noHighlight: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noImgZoomIn: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        customIcon: {
            type: import("vue").PropType<import("..").CustomIcon>;
            default: {};
        };
        sanitizeMermaid: {
            type: import("vue").PropType<(h: string) => Promise<string>>;
            default: (h: string) => Promise<string>;
        };
        codeFoldable: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        autoFoldThreshold: {
            type: import("vue").PropType<number>;
            default: number;
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
        onOnSave?: ((...args: any[]) => any) | undefined;
        onOnUploadImg?: ((...args: any[]) => any) | undefined;
        onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
        onOnGetCatalog?: ((...args: any[]) => any) | undefined;
        onOnError?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOnBlur?: ((...args: any[]) => any) | undefined;
        onOnFocus?: ((...args: any[]) => any) | undefined;
        onOnInput?: ((...args: any[]) => any) | undefined;
        onOnDrop?: ((...args: any[]) => any) | undefined;
        onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("..").EditorEmits, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onChange: {
            type: import("vue").PropType<import("..").ChangeEvent>;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: string;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        language: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onHtmlChanged: {
            type: import("vue").PropType<import("..").HtmlChangedEvent>;
        };
        onGetCatalog: {
            type: import("vue").PropType<import("..").GetCatalogEvent>;
        };
        editorId: {
            type: import("vue").PropType<string>;
            default: () => string;
        };
        showCodeRowNumber: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: () => {};
        };
        mdHeadingId: {
            type: import("vue").PropType<import("..").MdHeadingId>;
            default: import("..").MdHeadingId;
        };
        sanitize: {
            type: import("vue").PropType<(html: string) => string>;
            default: (html: string) => string;
        };
        noMermaid: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noKatex: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        noIconfont: {
            type: import("vue").PropType<boolean>;
        };
        formatCopiedText: {
            type: import("vue").PropType<(text: string) => string>;
            default: (text: string) => string;
        };
        codeStyleReverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeStyleReverseList: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        noHighlight: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noImgZoomIn: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        customIcon: {
            type: import("vue").PropType<import("..").CustomIcon>;
            default: {};
        };
        sanitizeMermaid: {
            type: import("vue").PropType<(h: string) => Promise<string>>;
            default: (h: string) => Promise<string>;
        };
        codeFoldable: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        autoFoldThreshold: {
            type: import("vue").PropType<number>;
            default: number;
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
        onOnSave?: ((...args: any[]) => any) | undefined;
        onOnUploadImg?: ((...args: any[]) => any) | undefined;
        onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
        onOnGetCatalog?: ((...args: any[]) => any) | undefined;
        onOnError?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOnBlur?: ((...args: any[]) => any) | undefined;
        onOnFocus?: ((...args: any[]) => any) | undefined;
        onOnInput?: ((...args: any[]) => any) | undefined;
        onOnDrop?: ((...args: any[]) => any) | undefined;
        onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
    }, {
        class: string;
        style: string | import("vue").CSSProperties;
        language: string;
        modelValue: string;
        theme: import("..").Themes;
        editorId: string;
        showCodeRowNumber: boolean;
        previewTheme: string;
        mdHeadingId: import("..").MdHeadingId;
        sanitize: (html: string) => string;
        noMermaid: boolean;
        noKatex: boolean;
        codeTheme: string;
        formatCopiedText: (text: string) => string;
        codeStyleReverse: boolean;
        codeStyleReverseList: string[];
        noHighlight: boolean;
        noImgZoomIn: boolean;
        customIcon: import("..").CustomIcon;
        sanitizeMermaid: (h: string) => Promise<string>;
        codeFoldable: boolean;
        autoFoldThreshold: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onChange: {
            type: import("vue").PropType<import("..").ChangeEvent>;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: string;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        language: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onHtmlChanged: {
            type: import("vue").PropType<import("..").HtmlChangedEvent>;
        };
        onGetCatalog: {
            type: import("vue").PropType<import("..").GetCatalogEvent>;
        };
        editorId: {
            type: import("vue").PropType<string>;
            default: () => string;
        };
        showCodeRowNumber: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: () => {};
        };
        mdHeadingId: {
            type: import("vue").PropType<import("..").MdHeadingId>;
            default: import("..").MdHeadingId;
        };
        sanitize: {
            type: import("vue").PropType<(html: string) => string>;
            default: (html: string) => string;
        };
        noMermaid: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noKatex: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        noIconfont: {
            type: import("vue").PropType<boolean>;
        };
        formatCopiedText: {
            type: import("vue").PropType<(text: string) => string>;
            default: (text: string) => string;
        };
        codeStyleReverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeStyleReverseList: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        noHighlight: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noImgZoomIn: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        customIcon: {
            type: import("vue").PropType<import("..").CustomIcon>;
            default: {};
        };
        sanitizeMermaid: {
            type: import("vue").PropType<(h: string) => Promise<string>>;
            default: (h: string) => Promise<string>;
        };
        codeFoldable: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        autoFoldThreshold: {
            type: import("vue").PropType<number>;
            default: number;
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
        onOnSave?: ((...args: any[]) => any) | undefined;
        onOnUploadImg?: ((...args: any[]) => any) | undefined;
        onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
        onOnGetCatalog?: ((...args: any[]) => any) | undefined;
        onOnError?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOnBlur?: ((...args: any[]) => any) | undefined;
        onOnFocus?: ((...args: any[]) => any) | undefined;
        onOnInput?: ((...args: any[]) => any) | undefined;
        onOnDrop?: ((...args: any[]) => any) | undefined;
        onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, {
        class: string;
        style: string | import("vue").CSSProperties;
        language: string;
        modelValue: string;
        theme: import("..").Themes;
        editorId: string;
        showCodeRowNumber: boolean;
        previewTheme: string;
        mdHeadingId: import("..").MdHeadingId;
        sanitize: (html: string) => string;
        noMermaid: boolean;
        noKatex: boolean;
        codeTheme: string;
        formatCopiedText: (text: string) => string;
        codeStyleReverse: boolean;
        codeStyleReverseList: string[];
        noHighlight: boolean;
        noImgZoomIn: boolean;
        customIcon: import("..").CustomIcon;
        sanitizeMermaid: (h: string) => Promise<string>;
        codeFoldable: boolean;
        autoFoldThreshold: number;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onChange: {
        type: import("vue").PropType<import("..").ChangeEvent>;
    };
    theme: {
        type: import("vue").PropType<import("..").Themes>;
        default: string;
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    language: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onHtmlChanged: {
        type: import("vue").PropType<import("..").HtmlChangedEvent>;
    };
    onGetCatalog: {
        type: import("vue").PropType<import("..").GetCatalogEvent>;
    };
    editorId: {
        type: import("vue").PropType<string>;
        default: () => string;
    };
    showCodeRowNumber: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    style: {
        type: import("vue").PropType<string | import("vue").CSSProperties>;
        default: () => {};
    };
    mdHeadingId: {
        type: import("vue").PropType<import("..").MdHeadingId>;
        default: import("..").MdHeadingId;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noIconfont: {
        type: import("vue").PropType<boolean>;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    codeStyleReverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeStyleReverseList: {
        type: import("vue").PropType<string[]>;
        default: string[];
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    customIcon: {
        type: import("vue").PropType<import("..").CustomIcon>;
        default: {};
    };
    sanitizeMermaid: {
        type: import("vue").PropType<(h: string) => Promise<string>>;
        default: (h: string) => Promise<string>;
    };
    codeFoldable: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    autoFoldThreshold: {
        type: import("vue").PropType<number>;
        default: number;
    };
}>> & {
    onOnChange?: ((...args: any[]) => any) | undefined;
    onOnSave?: ((...args: any[]) => any) | undefined;
    onOnUploadImg?: ((...args: any[]) => any) | undefined;
    onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
    onOnGetCatalog?: ((...args: any[]) => any) | undefined;
    onOnError?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onOnBlur?: ((...args: any[]) => any) | undefined;
    onOnFocus?: ((...args: any[]) => any) | undefined;
    onOnInput?: ((...args: any[]) => any) | undefined;
    onOnDrop?: ((...args: any[]) => any) | undefined;
    onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("..").EditorEmits, "onChange" | "onSave" | "onUploadImg" | "onHtmlChanged" | "onGetCatalog" | "onError" | "update:modelValue" | "onBlur" | "onFocus" | "onInput" | "onDrop" | "onInputBoxWitdhChange", {
    class: string;
    style: string | import("vue").CSSProperties;
    language: string;
    modelValue: string;
    theme: import("..").Themes;
    editorId: string;
    showCodeRowNumber: boolean;
    previewTheme: string;
    mdHeadingId: import("..").MdHeadingId;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    codeTheme: string;
    formatCopiedText: (text: string) => string;
    codeStyleReverse: boolean;
    codeStyleReverseList: string[];
    noHighlight: boolean;
    noImgZoomIn: boolean;
    customIcon: import("..").CustomIcon;
    sanitizeMermaid: (h: string) => Promise<string>;
    codeFoldable: boolean;
    autoFoldThreshold: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => App;
};
export default _default;
