declare const _default: import("vue").DefineComponent<{
    updateModelValue: {
        type: import("vue").PropType<(v: string) => void>;
        default: () => void;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    scrollAuto: {
        type: import("vue").PropType<boolean>;
    };
    autofocus: {
        type: import("vue").PropType<boolean>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
    };
    maxlength: {
        type: import("vue").PropType<number>;
    };
    autoDetectCode: {
        type: import("vue").PropType<boolean>;
    };
    onBlur: {
        type: import("vue").PropType<(event: FocusEvent) => void>;
        default: () => void;
    };
    onFocus: {
        type: import("vue").PropType<(event: FocusEvent) => void>;
        default: () => void;
    };
    noPrettier: {
        type: import("vue").PropType<boolean>;
    };
    completions: {
        type: import("vue").PropType<import("@codemirror/autocomplete").CompletionSource[]>;
    };
    catalogVisible: {
        type: import("vue").PropType<boolean>;
    };
    theme: {
        type: import("vue").PropType<import("../../type").Themes>;
        default: string;
    };
    onInput: {
        type: import("vue").PropType<(event: Event) => void>;
    };
    onDrop: {
        type: import("vue").PropType<(event: DragEvent) => void>;
        default: () => void;
    };
    inputBoxWitdh: {
        type: import("vue").PropType<string>;
    };
    onInputBoxWitdhChange: {
        type: import("vue").PropType<(width: string) => void>;
    };
    transformImgUrl: {
        type: import("vue").PropType<(t: string) => string | Promise<string>>;
        default: (t: string) => string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onChange: {
        type: import("vue").PropType<(v: string) => void>;
        default: () => void;
    };
    setting: {
        type: import("vue").PropType<import("../../type").SettingType>;
        default: () => {
            preview: boolean;
        };
    };
    onHtmlChanged: {
        type: import("vue").PropType<(h: string) => void>;
        default: () => void;
    };
    onGetCatalog: {
        type: import("vue").PropType<(list: import("../../type").HeadList[]) => void>;
        default: () => void;
    };
    mdHeadingId: {
        type: import("vue").PropType<import("../../type").MdHeadingId>;
        default: () => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
    };
    sanitizeMermaid: {
        type: import("vue").PropType<(h: string) => Promise<string>>;
    };
    codeFoldable: {
        type: import("vue").PropType<boolean>;
    };
    autoFoldThreshold: {
        type: import("vue").PropType<number>;
    };
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    updateModelValue: {
        type: import("vue").PropType<(v: string) => void>;
        default: () => void;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    scrollAuto: {
        type: import("vue").PropType<boolean>;
    };
    autofocus: {
        type: import("vue").PropType<boolean>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
    };
    maxlength: {
        type: import("vue").PropType<number>;
    };
    autoDetectCode: {
        type: import("vue").PropType<boolean>;
    };
    onBlur: {
        type: import("vue").PropType<(event: FocusEvent) => void>;
        default: () => void;
    };
    onFocus: {
        type: import("vue").PropType<(event: FocusEvent) => void>;
        default: () => void;
    };
    noPrettier: {
        type: import("vue").PropType<boolean>;
    };
    completions: {
        type: import("vue").PropType<import("@codemirror/autocomplete").CompletionSource[]>;
    };
    catalogVisible: {
        type: import("vue").PropType<boolean>;
    };
    theme: {
        type: import("vue").PropType<import("../../type").Themes>;
        default: string;
    };
    onInput: {
        type: import("vue").PropType<(event: Event) => void>;
    };
    onDrop: {
        type: import("vue").PropType<(event: DragEvent) => void>;
        default: () => void;
    };
    inputBoxWitdh: {
        type: import("vue").PropType<string>;
    };
    onInputBoxWitdhChange: {
        type: import("vue").PropType<(width: string) => void>;
    };
    transformImgUrl: {
        type: import("vue").PropType<(t: string) => string | Promise<string>>;
        default: (t: string) => string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onChange: {
        type: import("vue").PropType<(v: string) => void>;
        default: () => void;
    };
    setting: {
        type: import("vue").PropType<import("../../type").SettingType>;
        default: () => {
            preview: boolean;
        };
    };
    onHtmlChanged: {
        type: import("vue").PropType<(h: string) => void>;
        default: () => void;
    };
    onGetCatalog: {
        type: import("vue").PropType<(list: import("../../type").HeadList[]) => void>;
        default: () => void;
    };
    mdHeadingId: {
        type: import("vue").PropType<import("../../type").MdHeadingId>;
        default: () => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
    };
    sanitizeMermaid: {
        type: import("vue").PropType<(h: string) => Promise<string>>;
    };
    codeFoldable: {
        type: import("vue").PropType<boolean>;
    };
    autoFoldThreshold: {
        type: import("vue").PropType<number>;
    };
}>>, {
    previewOnly: boolean;
    onChange: (v: string) => void;
    onHtmlChanged: (h: string) => void;
    onGetCatalog: (list: import("../../type").HeadList[]) => void;
    onBlur: (event: FocusEvent) => void;
    onFocus: (event: FocusEvent) => void;
    onDrop: (event: DragEvent) => void;
    placeholder: string;
    transformImgUrl: (t: string) => string | Promise<string>;
    modelValue: string;
    theme: import("../../type").Themes;
    mdHeadingId: import("../../type").MdHeadingId;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    formatCopiedText: (text: string) => string;
    noHighlight: boolean;
    setting: import("../../type").SettingType;
    updateModelValue: (v: string) => void;
}, {}>;
export default _default;
