import { ExtractPropTypes } from 'vue';
import { LooseRequired } from '@vue/shared';
import { contentPreviewProps } from './props';
export type ContentPreviewProps = Readonly<LooseRequired<Readonly<ExtractPropTypes<typeof contentPreviewProps>>>>;
declare const ContentPreview: import("vue").DefineComponent<{
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onChange: {
        type: import("vue").PropType<(v: string) => void>;
        default: () => void;
    };
    setting: {
        type: import("vue").PropType<import("../../type").SettingType>;
        default: () => {
            preview: boolean;
        };
    };
    onHtmlChanged: {
        type: import("vue").PropType<(h: string) => void>;
        default: () => void;
    };
    onGetCatalog: {
        type: import("vue").PropType<(list: import("../../type").HeadList[]) => void>;
        default: () => void;
    };
    mdHeadingId: {
        type: import("vue").PropType<import("../../type").MdHeadingId>;
        default: () => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
    };
    sanitizeMermaid: {
        type: import("vue").PropType<(h: string) => Promise<string>>;
    };
    codeFoldable: {
        type: import("vue").PropType<boolean>;
    };
    autoFoldThreshold: {
        type: import("vue").PropType<number>;
    };
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onChange: {
        type: import("vue").PropType<(v: string) => void>;
        default: () => void;
    };
    setting: {
        type: import("vue").PropType<import("../../type").SettingType>;
        default: () => {
            preview: boolean;
        };
    };
    onHtmlChanged: {
        type: import("vue").PropType<(h: string) => void>;
        default: () => void;
    };
    onGetCatalog: {
        type: import("vue").PropType<(list: import("../../type").HeadList[]) => void>;
        default: () => void;
    };
    mdHeadingId: {
        type: import("vue").PropType<import("../../type").MdHeadingId>;
        default: () => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
    };
    sanitizeMermaid: {
        type: import("vue").PropType<(h: string) => Promise<string>>;
    };
    codeFoldable: {
        type: import("vue").PropType<boolean>;
    };
    autoFoldThreshold: {
        type: import("vue").PropType<number>;
    };
}>>, {
    previewOnly: boolean;
    onChange: (v: string) => void;
    onHtmlChanged: (h: string) => void;
    onGetCatalog: (list: import("../../type").HeadList[]) => void;
    modelValue: string;
    mdHeadingId: import("../../type").MdHeadingId;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    formatCopiedText: (text: string) => string;
    noHighlight: boolean;
    setting: import("../../type").SettingType;
}, {}>;
export default ContentPreview;
