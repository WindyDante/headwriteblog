import { VNode } from 'vue';
import { ToolbarNames } from '../../type';
declare const _default: import("vue").DefineComponent<{
    noPrettier: {
        type: import("vue").PropType<boolean>;
    };
    toolbars: {
        type: import("vue").PropType<ToolbarNames[]>;
        default: () => never[];
    };
    toolbarsExclude: {
        type: import("vue").PropType<ToolbarNames[]>;
        default: () => never[];
    };
    setting: {
        type: import("vue").PropType<import("../../type").SettingType>;
        default: () => {};
    };
    screenfull: {
        type: ObjectConstructor;
        default: null;
    };
    screenfullJs: {
        type: import("vue").PropType<string>;
        default: string;
    };
    updateSetting: {
        type: import("vue").PropType<import("../../type").UpdateSetting>;
        default: () => void;
    };
    tableShape: {
        type: import("vue").PropType<number[]>;
        default: () => number[];
    };
    defToolbars: {
        type: import("vue").PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
    };
    noUploadImg: {
        type: import("vue").PropType<boolean>;
    };
    showToolbarName: {
        type: import("vue").PropType<boolean>;
    };
    catalogVisible: {
        type: import("vue").PropType<boolean>;
    };
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    noPrettier: {
        type: import("vue").PropType<boolean>;
    };
    toolbars: {
        type: import("vue").PropType<ToolbarNames[]>;
        default: () => never[];
    };
    toolbarsExclude: {
        type: import("vue").PropType<ToolbarNames[]>;
        default: () => never[];
    };
    setting: {
        type: import("vue").PropType<import("../../type").SettingType>;
        default: () => {};
    };
    screenfull: {
        type: ObjectConstructor;
        default: null;
    };
    screenfullJs: {
        type: import("vue").PropType<string>;
        default: string;
    };
    updateSetting: {
        type: import("vue").PropType<import("../../type").UpdateSetting>;
        default: () => void;
    };
    tableShape: {
        type: import("vue").PropType<number[]>;
        default: () => number[];
    };
    defToolbars: {
        type: import("vue").PropType<VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
    };
    noUploadImg: {
        type: import("vue").PropType<boolean>;
    };
    showToolbarName: {
        type: import("vue").PropType<boolean>;
    };
    catalogVisible: {
        type: import("vue").PropType<boolean>;
    };
}>>, {
    toolbars: ToolbarNames[];
    toolbarsExclude: ToolbarNames[];
    tableShape: number[];
    setting: import("../../type").SettingType;
    screenfull: Record<string, any>;
    screenfullJs: string;
    updateSetting: import("../../type").UpdateSetting;
}, {}>;
export default _default;
