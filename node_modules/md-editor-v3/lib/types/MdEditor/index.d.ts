import { App } from 'vue';
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        onSave: {
            type: import("vue").PropType<import("./type").SaveEvent>;
        };
        onUploadImg: {
            type: import("vue").PropType<import("./type").UploadImgEvent>;
        };
        pageFullscreen: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        preview: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        htmlPreview: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        toolbars: {
            type: import("vue").PropType<import("./type").ToolbarNames[]>;
            default: string[];
        };
        toolbarsExclude: {
            type: import("vue").PropType<import("./type").ToolbarNames[]>;
            default: never[];
        };
        noPrettier: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        tabWidth: {
            type: import("vue").PropType<number>;
            default: number;
        };
        tableShape: {
            type: import("vue").PropType<number[]>;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defToolbars: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        onError: {
            type: import("vue").PropType<import("./type").ErrorEvent>;
        };
        footers: {
            type: import("vue").PropType<import("./type").Footers[]>;
            default: import("./type").Footers[];
        };
        scrollAuto: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        defFooters: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        noUploadImg: {
            type: import("vue").PropType<boolean>;
        };
        autoFocus: {
            type: import("vue").PropType<boolean>;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        };
        readOnly: {
            type: import("vue").PropType<boolean>;
        };
        maxLength: {
            type: import("vue").PropType<number>;
        };
        autoDetectCode: {
            type: import("vue").PropType<boolean>;
        };
        onBlur: {
            type: import("vue").PropType<(event: FocusEvent) => void>;
        };
        onFocus: {
            type: import("vue").PropType<(event: FocusEvent) => void>;
        };
        completions: {
            type: import("vue").PropType<import("@codemirror/autocomplete").CompletionSource[]>;
        };
        showToolbarName: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onInput: {
            type: import("vue").PropType<(event: Event) => void>;
        };
        onDrop: {
            type: import("vue").PropType<(event: DragEvent) => void>;
        };
        inputBoxWitdh: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onInputBoxWitdhChange: {
            type: import("vue").PropType<(width: string) => void>;
        };
        transformImgUrl: {
            type: import("vue").PropType<(t: string) => string | Promise<string>>;
            default: (t: string) => string;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onChange: {
            type: import("vue").PropType<import("./type").ChangeEvent>;
        };
        theme: {
            type: import("vue").PropType<import("./type").Themes>;
            default: string;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        language: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onHtmlChanged: {
            type: import("vue").PropType<import("./type").HtmlChangedEvent>;
        };
        onGetCatalog: {
            type: import("vue").PropType<import("./type").GetCatalogEvent>;
        };
        editorId: {
            type: import("vue").PropType<string>;
            default: () => string;
        };
        showCodeRowNumber: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: () => {};
        };
        mdHeadingId: {
            type: import("vue").PropType<import("./type").MdHeadingId>;
            default: import("./type").MdHeadingId;
        };
        sanitize: {
            type: import("vue").PropType<(html: string) => string>;
            default: (html: string) => string;
        };
        noMermaid: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noKatex: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        noIconfont: {
            type: import("vue").PropType<boolean>;
        };
        formatCopiedText: {
            type: import("vue").PropType<(text: string) => string>;
            default: (text: string) => string;
        };
        codeStyleReverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeStyleReverseList: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        noHighlight: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noImgZoomIn: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        customIcon: {
            type: import("vue").PropType<import("./type").CustomIcon>;
            default: {};
        };
        sanitizeMermaid: {
            type: import("vue").PropType<(h: string) => Promise<string>>;
            default: (h: string) => Promise<string>;
        };
        codeFoldable: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        autoFoldThreshold: {
            type: import("vue").PropType<number>;
            default: number;
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
        onOnSave?: ((...args: any[]) => any) | undefined;
        onOnUploadImg?: ((...args: any[]) => any) | undefined;
        onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
        onOnGetCatalog?: ((...args: any[]) => any) | undefined;
        onOnError?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOnBlur?: ((...args: any[]) => any) | undefined;
        onOnFocus?: ((...args: any[]) => any) | undefined;
        onOnInput?: ((...args: any[]) => any) | undefined;
        onOnDrop?: ((...args: any[]) => any) | undefined;
        onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("./type").EditorEmits, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        onSave: {
            type: import("vue").PropType<import("./type").SaveEvent>;
        };
        onUploadImg: {
            type: import("vue").PropType<import("./type").UploadImgEvent>;
        };
        pageFullscreen: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        preview: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        htmlPreview: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        toolbars: {
            type: import("vue").PropType<import("./type").ToolbarNames[]>;
            default: string[];
        };
        toolbarsExclude: {
            type: import("vue").PropType<import("./type").ToolbarNames[]>;
            default: never[];
        };
        noPrettier: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        tabWidth: {
            type: import("vue").PropType<number>;
            default: number;
        };
        tableShape: {
            type: import("vue").PropType<number[]>;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defToolbars: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        onError: {
            type: import("vue").PropType<import("./type").ErrorEvent>;
        };
        footers: {
            type: import("vue").PropType<import("./type").Footers[]>;
            default: import("./type").Footers[];
        };
        scrollAuto: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        defFooters: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        noUploadImg: {
            type: import("vue").PropType<boolean>;
        };
        autoFocus: {
            type: import("vue").PropType<boolean>;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        };
        readOnly: {
            type: import("vue").PropType<boolean>;
        };
        maxLength: {
            type: import("vue").PropType<number>;
        };
        autoDetectCode: {
            type: import("vue").PropType<boolean>;
        };
        onBlur: {
            type: import("vue").PropType<(event: FocusEvent) => void>;
        };
        onFocus: {
            type: import("vue").PropType<(event: FocusEvent) => void>;
        };
        completions: {
            type: import("vue").PropType<import("@codemirror/autocomplete").CompletionSource[]>;
        };
        showToolbarName: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onInput: {
            type: import("vue").PropType<(event: Event) => void>;
        };
        onDrop: {
            type: import("vue").PropType<(event: DragEvent) => void>;
        };
        inputBoxWitdh: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onInputBoxWitdhChange: {
            type: import("vue").PropType<(width: string) => void>;
        };
        transformImgUrl: {
            type: import("vue").PropType<(t: string) => string | Promise<string>>;
            default: (t: string) => string;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onChange: {
            type: import("vue").PropType<import("./type").ChangeEvent>;
        };
        theme: {
            type: import("vue").PropType<import("./type").Themes>;
            default: string;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        language: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onHtmlChanged: {
            type: import("vue").PropType<import("./type").HtmlChangedEvent>;
        };
        onGetCatalog: {
            type: import("vue").PropType<import("./type").GetCatalogEvent>;
        };
        editorId: {
            type: import("vue").PropType<string>;
            default: () => string;
        };
        showCodeRowNumber: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: () => {};
        };
        mdHeadingId: {
            type: import("vue").PropType<import("./type").MdHeadingId>;
            default: import("./type").MdHeadingId;
        };
        sanitize: {
            type: import("vue").PropType<(html: string) => string>;
            default: (html: string) => string;
        };
        noMermaid: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noKatex: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        noIconfont: {
            type: import("vue").PropType<boolean>;
        };
        formatCopiedText: {
            type: import("vue").PropType<(text: string) => string>;
            default: (text: string) => string;
        };
        codeStyleReverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeStyleReverseList: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        noHighlight: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noImgZoomIn: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        customIcon: {
            type: import("vue").PropType<import("./type").CustomIcon>;
            default: {};
        };
        sanitizeMermaid: {
            type: import("vue").PropType<(h: string) => Promise<string>>;
            default: (h: string) => Promise<string>;
        };
        codeFoldable: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        autoFoldThreshold: {
            type: import("vue").PropType<number>;
            default: number;
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
        onOnSave?: ((...args: any[]) => any) | undefined;
        onOnUploadImg?: ((...args: any[]) => any) | undefined;
        onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
        onOnGetCatalog?: ((...args: any[]) => any) | undefined;
        onOnError?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOnBlur?: ((...args: any[]) => any) | undefined;
        onOnFocus?: ((...args: any[]) => any) | undefined;
        onOnInput?: ((...args: any[]) => any) | undefined;
        onOnDrop?: ((...args: any[]) => any) | undefined;
        onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
    }, {
        preview: boolean;
        pageFullscreen: boolean;
        htmlPreview: boolean;
        class: string;
        style: string | import("vue").CSSProperties;
        language: string;
        toolbars: import("./type").ToolbarNames[];
        toolbarsExclude: import("./type").ToolbarNames[];
        noPrettier: boolean;
        tabWidth: number;
        placeholder: string;
        footers: import("./type").Footers[];
        scrollAuto: boolean;
        showToolbarName: boolean;
        inputBoxWitdh: string;
        transformImgUrl: (t: string) => string | Promise<string>;
        modelValue: string;
        theme: import("./type").Themes;
        editorId: string;
        showCodeRowNumber: boolean;
        previewTheme: string;
        mdHeadingId: import("./type").MdHeadingId;
        sanitize: (html: string) => string;
        noMermaid: boolean;
        noKatex: boolean;
        codeTheme: string;
        formatCopiedText: (text: string) => string;
        codeStyleReverse: boolean;
        codeStyleReverseList: string[];
        noHighlight: boolean;
        noImgZoomIn: boolean;
        customIcon: import("./type").CustomIcon;
        sanitizeMermaid: (h: string) => Promise<string>;
        codeFoldable: boolean;
        autoFoldThreshold: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        onSave: {
            type: import("vue").PropType<import("./type").SaveEvent>;
        };
        onUploadImg: {
            type: import("vue").PropType<import("./type").UploadImgEvent>;
        };
        pageFullscreen: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        preview: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        htmlPreview: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        toolbars: {
            type: import("vue").PropType<import("./type").ToolbarNames[]>;
            default: string[];
        };
        toolbarsExclude: {
            type: import("vue").PropType<import("./type").ToolbarNames[]>;
            default: never[];
        };
        noPrettier: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        tabWidth: {
            type: import("vue").PropType<number>;
            default: number;
        };
        tableShape: {
            type: import("vue").PropType<number[]>;
        };
        placeholder: {
            type: import("vue").PropType<string>;
            default: string;
        };
        defToolbars: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        onError: {
            type: import("vue").PropType<import("./type").ErrorEvent>;
        };
        footers: {
            type: import("vue").PropType<import("./type").Footers[]>;
            default: import("./type").Footers[];
        };
        scrollAuto: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        defFooters: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
        };
        noUploadImg: {
            type: import("vue").PropType<boolean>;
        };
        autoFocus: {
            type: import("vue").PropType<boolean>;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
        };
        readOnly: {
            type: import("vue").PropType<boolean>;
        };
        maxLength: {
            type: import("vue").PropType<number>;
        };
        autoDetectCode: {
            type: import("vue").PropType<boolean>;
        };
        onBlur: {
            type: import("vue").PropType<(event: FocusEvent) => void>;
        };
        onFocus: {
            type: import("vue").PropType<(event: FocusEvent) => void>;
        };
        completions: {
            type: import("vue").PropType<import("@codemirror/autocomplete").CompletionSource[]>;
        };
        showToolbarName: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onInput: {
            type: import("vue").PropType<(event: Event) => void>;
        };
        onDrop: {
            type: import("vue").PropType<(event: DragEvent) => void>;
        };
        inputBoxWitdh: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onInputBoxWitdhChange: {
            type: import("vue").PropType<(width: string) => void>;
        };
        transformImgUrl: {
            type: import("vue").PropType<(t: string) => string | Promise<string>>;
            default: (t: string) => string;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onChange: {
            type: import("vue").PropType<import("./type").ChangeEvent>;
        };
        theme: {
            type: import("vue").PropType<import("./type").Themes>;
            default: string;
        };
        class: {
            type: StringConstructor;
            default: string;
        };
        language: {
            type: import("vue").PropType<string>;
            default: string;
        };
        onHtmlChanged: {
            type: import("vue").PropType<import("./type").HtmlChangedEvent>;
        };
        onGetCatalog: {
            type: import("vue").PropType<import("./type").GetCatalogEvent>;
        };
        editorId: {
            type: import("vue").PropType<string>;
            default: () => string;
        };
        showCodeRowNumber: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: () => {};
        };
        mdHeadingId: {
            type: import("vue").PropType<import("./type").MdHeadingId>;
            default: import("./type").MdHeadingId;
        };
        sanitize: {
            type: import("vue").PropType<(html: string) => string>;
            default: (html: string) => string;
        };
        noMermaid: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noKatex: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: string;
        };
        noIconfont: {
            type: import("vue").PropType<boolean>;
        };
        formatCopiedText: {
            type: import("vue").PropType<(text: string) => string>;
            default: (text: string) => string;
        };
        codeStyleReverse: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        codeStyleReverseList: {
            type: import("vue").PropType<string[]>;
            default: string[];
        };
        noHighlight: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        noImgZoomIn: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        customIcon: {
            type: import("vue").PropType<import("./type").CustomIcon>;
            default: {};
        };
        sanitizeMermaid: {
            type: import("vue").PropType<(h: string) => Promise<string>>;
            default: (h: string) => Promise<string>;
        };
        codeFoldable: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        autoFoldThreshold: {
            type: import("vue").PropType<number>;
            default: number;
        };
    }>> & {
        onOnChange?: ((...args: any[]) => any) | undefined;
        onOnSave?: ((...args: any[]) => any) | undefined;
        onOnUploadImg?: ((...args: any[]) => any) | undefined;
        onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
        onOnGetCatalog?: ((...args: any[]) => any) | undefined;
        onOnError?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onOnBlur?: ((...args: any[]) => any) | undefined;
        onOnFocus?: ((...args: any[]) => any) | undefined;
        onOnInput?: ((...args: any[]) => any) | undefined;
        onOnDrop?: ((...args: any[]) => any) | undefined;
        onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, {
        preview: boolean;
        pageFullscreen: boolean;
        htmlPreview: boolean;
        class: string;
        style: string | import("vue").CSSProperties;
        language: string;
        toolbars: import("./type").ToolbarNames[];
        toolbarsExclude: import("./type").ToolbarNames[];
        noPrettier: boolean;
        tabWidth: number;
        placeholder: string;
        footers: import("./type").Footers[];
        scrollAuto: boolean;
        showToolbarName: boolean;
        inputBoxWitdh: string;
        transformImgUrl: (t: string) => string | Promise<string>;
        modelValue: string;
        theme: import("./type").Themes;
        editorId: string;
        showCodeRowNumber: boolean;
        previewTheme: string;
        mdHeadingId: import("./type").MdHeadingId;
        sanitize: (html: string) => string;
        noMermaid: boolean;
        noKatex: boolean;
        codeTheme: string;
        formatCopiedText: (text: string) => string;
        codeStyleReverse: boolean;
        codeStyleReverseList: string[];
        noHighlight: boolean;
        noImgZoomIn: boolean;
        customIcon: import("./type").CustomIcon;
        sanitizeMermaid: (h: string) => Promise<string>;
        codeFoldable: boolean;
        autoFoldThreshold: number;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    onSave: {
        type: import("vue").PropType<import("./type").SaveEvent>;
    };
    onUploadImg: {
        type: import("vue").PropType<import("./type").UploadImgEvent>;
    };
    pageFullscreen: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    preview: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    htmlPreview: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    toolbars: {
        type: import("vue").PropType<import("./type").ToolbarNames[]>;
        default: string[];
    };
    toolbarsExclude: {
        type: import("vue").PropType<import("./type").ToolbarNames[]>;
        default: never[];
    };
    noPrettier: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    tabWidth: {
        type: import("vue").PropType<number>;
        default: number;
    };
    tableShape: {
        type: import("vue").PropType<number[]>;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    defToolbars: {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
    };
    onError: {
        type: import("vue").PropType<import("./type").ErrorEvent>;
    };
    footers: {
        type: import("vue").PropType<import("./type").Footers[]>;
        default: import("./type").Footers[];
    };
    scrollAuto: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    defFooters: {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
    };
    noUploadImg: {
        type: import("vue").PropType<boolean>;
    };
    autoFocus: {
        type: import("vue").PropType<boolean>;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
    };
    readOnly: {
        type: import("vue").PropType<boolean>;
    };
    maxLength: {
        type: import("vue").PropType<number>;
    };
    autoDetectCode: {
        type: import("vue").PropType<boolean>;
    };
    onBlur: {
        type: import("vue").PropType<(event: FocusEvent) => void>;
    };
    onFocus: {
        type: import("vue").PropType<(event: FocusEvent) => void>;
    };
    completions: {
        type: import("vue").PropType<import("@codemirror/autocomplete").CompletionSource[]>;
    };
    showToolbarName: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onInput: {
        type: import("vue").PropType<(event: Event) => void>;
    };
    onDrop: {
        type: import("vue").PropType<(event: DragEvent) => void>;
    };
    inputBoxWitdh: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onInputBoxWitdhChange: {
        type: import("vue").PropType<(width: string) => void>;
    };
    transformImgUrl: {
        type: import("vue").PropType<(t: string) => string | Promise<string>>;
        default: (t: string) => string;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onChange: {
        type: import("vue").PropType<import("./type").ChangeEvent>;
    };
    theme: {
        type: import("vue").PropType<import("./type").Themes>;
        default: string;
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    language: {
        type: import("vue").PropType<string>;
        default: string;
    };
    onHtmlChanged: {
        type: import("vue").PropType<import("./type").HtmlChangedEvent>;
    };
    onGetCatalog: {
        type: import("vue").PropType<import("./type").GetCatalogEvent>;
    };
    editorId: {
        type: import("vue").PropType<string>;
        default: () => string;
    };
    showCodeRowNumber: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    previewTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    style: {
        type: import("vue").PropType<string | import("vue").CSSProperties>;
        default: () => {};
    };
    mdHeadingId: {
        type: import("vue").PropType<import("./type").MdHeadingId>;
        default: import("./type").MdHeadingId;
    };
    sanitize: {
        type: import("vue").PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    noMermaid: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noKatex: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeTheme: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noIconfont: {
        type: import("vue").PropType<boolean>;
    };
    formatCopiedText: {
        type: import("vue").PropType<(text: string) => string>;
        default: (text: string) => string;
    };
    codeStyleReverse: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    codeStyleReverseList: {
        type: import("vue").PropType<string[]>;
        default: string[];
    };
    noHighlight: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    noImgZoomIn: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    customIcon: {
        type: import("vue").PropType<import("./type").CustomIcon>;
        default: {};
    };
    sanitizeMermaid: {
        type: import("vue").PropType<(h: string) => Promise<string>>;
        default: (h: string) => Promise<string>;
    };
    codeFoldable: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    autoFoldThreshold: {
        type: import("vue").PropType<number>;
        default: number;
    };
}>> & {
    onOnChange?: ((...args: any[]) => any) | undefined;
    onOnSave?: ((...args: any[]) => any) | undefined;
    onOnUploadImg?: ((...args: any[]) => any) | undefined;
    onOnHtmlChanged?: ((...args: any[]) => any) | undefined;
    onOnGetCatalog?: ((...args: any[]) => any) | undefined;
    onOnError?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onOnBlur?: ((...args: any[]) => any) | undefined;
    onOnFocus?: ((...args: any[]) => any) | undefined;
    onOnInput?: ((...args: any[]) => any) | undefined;
    onOnDrop?: ((...args: any[]) => any) | undefined;
    onOnInputBoxWitdhChange?: ((...args: any[]) => any) | undefined;
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("./type").EditorEmits, "onChange" | "onSave" | "onUploadImg" | "onHtmlChanged" | "onGetCatalog" | "onError" | "update:modelValue" | "onBlur" | "onFocus" | "onInput" | "onDrop" | "onInputBoxWitdhChange", {
    preview: boolean;
    pageFullscreen: boolean;
    htmlPreview: boolean;
    class: string;
    style: string | import("vue").CSSProperties;
    language: string;
    toolbars: import("./type").ToolbarNames[];
    toolbarsExclude: import("./type").ToolbarNames[];
    noPrettier: boolean;
    tabWidth: number;
    placeholder: string;
    footers: import("./type").Footers[];
    scrollAuto: boolean;
    showToolbarName: boolean;
    inputBoxWitdh: string;
    transformImgUrl: (t: string) => string | Promise<string>;
    modelValue: string;
    theme: import("./type").Themes;
    editorId: string;
    showCodeRowNumber: boolean;
    previewTheme: string;
    mdHeadingId: import("./type").MdHeadingId;
    sanitize: (html: string) => string;
    noMermaid: boolean;
    noKatex: boolean;
    codeTheme: string;
    formatCopiedText: (text: string) => string;
    codeStyleReverse: boolean;
    codeStyleReverseList: string[];
    noHighlight: boolean;
    noImgZoomIn: boolean;
    customIcon: import("./type").CustomIcon;
    sanitizeMermaid: (h: string) => Promise<string>;
    codeFoldable: boolean;
    autoFoldThreshold: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => App;
};
export default _default;
